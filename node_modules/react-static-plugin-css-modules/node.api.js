"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extractCssChunksWebpackPlugin = _interopRequireDefault(require("extract-css-chunks-webpack-plugin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = function _default() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    webpack: function webpack(config, _ref) {
      var stage = _ref.stage;
      var loaders = [];
      var cssLoader = {
        loader: 'css-loader',
        options: _objectSpread({
          modules: true,
          importLoaders: 1
        }, options)
      };

      if (stage === 'dev') {
        // Dev
        loaders = [{
          loader: _extractCssChunksWebpackPlugin["default"].loader,
          options: {
            hot: true,
            reloadAll: true
          }
        }, cssLoader];
      } else if (stage === 'node') {
        loaders = [_objectSpread({}, cssLoader, {
          loader: 'css-loader',
          options: _objectSpread({
            exportOnlyLocals: true
          }, options)
        })];
      } else {
        // Prod
        loaders = [_extractCssChunksWebpackPlugin["default"].loader, cssLoader];
      }

      config.module.rules[0].oneOf.unshift({
        test: /\.css$/,
        use: loaders
      });
      return config;
    }
  };
};

exports["default"] = _default;